<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Raspberry Pi Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .dashboard-container {
            padding: 20px;
        }
        .metric-card {
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-bottom: 20px;
            background: white;
        }
        .chart-container {
            height: 300px;
            margin-bottom: 20px;
        }
        .real-time-value {
            font-size: 2rem;
            font-weight: bold;
            color: #28a745;
        }
        .metric-label {
            color: #6c757d;
            font-size: 1rem;
        }
    </style>
</head>
<body>
    <%- include('partials/navbar') %>

    <div class="container dashboard-container">
        <h2 class="mb-4">Raspberry Pi Monitoring Dashboard</h2>

        <!-- Real-time Metrics -->
        <div class="row">
            <div class="col-md-4">
                <div class="metric-card">
                    <h5 class="metric-label">Temperature</h5>
                    <div class="real-time-value" id="temperature">--°C</div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="metric-card">
                    <h5 class="metric-label">Humidity</h5>
                    <div class="real-time-value" id="humidity">--%</div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="metric-card">
                    <h5 class="metric-label">Moisture</h5>
                    <div class="real-time-value" id="moisture">--%</div>
                </div>
            </div>
        </div>

        <!-- Charts -->
        <div class="row">
            <div class="col-md-6">
                <div class="metric-card">
                    <h5>Temperature History</h5>
                    <div class="chart-container">
                        <canvas id="temperatureChart"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="metric-card">
                    <h5>Humidity History</h5>
                    <div class="chart-container">
                        <canvas id="humidityChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="metric-card">
                    <h5>Moisture History</h5>
                    <div class="chart-container">
                        <canvas id="moistureChart"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="metric-card">
                    <h5>System Status</h5>
                    <div id="systemStatus" class="mt-3">
                        <div class="alert alert-info">
                            <strong>Last Update:</strong> <span id="lastUpdate">--</span>
                        </div>
                        <div class="alert" id="statusAlert">
                            <strong>Status:</strong> <span id="statusText">Connecting...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Initialize charts
        const temperatureChart = new Chart(
            document.getElementById('temperatureChart'),
            {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Temperature (°C)',
                        data: [],
                        borderColor: 'rgb(255, 99, 132)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            }
        );

        const humidityChart = new Chart(
            document.getElementById('humidityChart'),
            {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Humidity (%)',
                        data: [],
                        borderColor: 'rgb(54, 162, 235)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            }
        );

        const moistureChart = new Chart(
            document.getElementById('moistureChart'),
            {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Moisture (%)',
                        data: [],
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            }
        );

        // Function to update charts
        function updateCharts(data) {
            const now = new Date();
            const timeLabel = now.toLocaleTimeString();

            // Update temperature chart
            temperatureChart.data.labels.push(timeLabel);
            temperatureChart.data.datasets[0].data.push(data.temperature);
            if (temperatureChart.data.labels.length > 20) {
                temperatureChart.data.labels.shift();
                temperatureChart.data.datasets[0].data.shift();
            }
            temperatureChart.update();

            // Update humidity chart
            humidityChart.data.labels.push(timeLabel);
            humidityChart.data.datasets[0].data.push(data.humidity);
            if (humidityChart.data.labels.length > 20) {
                humidityChart.data.labels.shift();
                humidityChart.data.datasets[0].data.shift();
            }
            humidityChart.update();

            // Update moisture chart
            moistureChart.data.labels.push(timeLabel);
            moistureChart.data.datasets[0].data.push(data.moisture);
            if (moistureChart.data.labels.length > 20) {
                moistureChart.data.labels.shift();
                moistureChart.data.datasets[0].data.shift();
            }
            moistureChart.update();
        }

        // Function to update real-time values
        function updateRealTimeValues(data) {
            document.getElementById('temperature').textContent = `${data.temperature}°C`;
            document.getElementById('humidity').textContent = `${data.humidity}%`;
            document.getElementById('moisture').textContent = `${data.moisture}%`;
            document.getElementById('lastUpdate').textContent = new Date().toLocaleString();
        }

        // Function to update status
        function updateStatus(status) {
            const statusAlert = document.getElementById('statusAlert');
            const statusText = document.getElementById('statusText');
            
            statusAlert.className = 'alert';
            if (status === 'connected') {
                statusAlert.classList.add('alert-success');
                statusText.textContent = 'Connected';
            } else if (status === 'error') {
                statusAlert.classList.add('alert-danger');
                statusText.textContent = 'Connection Error';
            } else {
                statusAlert.classList.add('alert-warning');
                statusText.textContent = 'Connecting...';
            }
        }

        // Function to fetch data from Raspberry Pi
        async function fetchData() {
            try {
                const response = await fetch('/api/pi-data');
                if (!response.ok) throw new Error('Network response was not ok');
                
                const data = await response.json();
                updateRealTimeValues(data);
                updateCharts(data);
                updateStatus('connected');
            } catch (error) {
                console.error('Error fetching data:', error);
                updateStatus('error');
            }
        }

        // Fetch data every 5 seconds
        setInterval(fetchData, 5000);
        // Initial fetch
        fetchData();
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html> 